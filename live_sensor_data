// Include necessary libraries
#include <I2CSoilMoistureSensor.h>
#include <Wire.h>
#include "DFRobot_BME680_I2C.h"
#include "Wire.h"


/*use an accurate altitude to calibrate sea level air pressure*/
#define CALIBRATE_PRESSURE

DFRobot_BME680_I2C bme(0x77);  //0x77 I2C address

float seaLevel; 

// Define moisture sensor pin
#define SOIL_SENSOR_1 A0

// Define Relay Pin & pump
#define RELAY_PIN 4
bool pumpStatus = false;
int pump_trigger = 540;

const int DRY_THRESHOLD = 400;
const int WET_THRESHOLD = 700;

int soilMoisturePer;


void setup() {
  Serial.begin(9600);
  pinMode(SOIL_SENSOR_1, INPUT);
  pinMode(RELAY_PIN, OUTPUT);

  // BME680 sensor setup
    uint8_t rslt = 1;
  Serial.begin(9600);
  while(!Serial);
  delay(1000);
  Serial.println();
  while(rslt != 0) {
    rslt = bme.begin();
    if(rslt != 0) {
      Serial.println("bme begin failure");
      delay(2000);
    }
  }
  Serial.println("bme begin successful");
  #ifdef CALIBRATE_PRESSURE
  bme.startConvert();
  delay(1000);
  bme.update();
  /*You can use an accurate altitude to calibrate sea level air pressure. 
   *And then use this calibrated sea level pressure as a reference to obtain the calibrated altitude.
   *In this case,525.0m is chendu accurate altitude.
   */
  seaLevel = bme.readSeaLevel(164.0);
  Serial.print(seaLevel);
  Serial.print("seaLevel : ,");
  #endif
}

void  loop() {
  bme.startConvert();
  delay(3000);
  bme.update();
  Serial.println();
  Serial.print(bme.readTemperature() / 100, 2);
  Serial.print(" *C,"); 
  Serial.print(bme.readPressure() );
  Serial.print("Pa,");
  Serial.print(bme.readHumidity() / 1000, 2);
  Serial.print("% ,");
  Serial.print(bme.readGasResistance()/1000);
  Serial.print("KOhms,");
  Serial.print(bme.readAltitude());
  Serial.print("m,");
  #ifdef CALIBRATE_PRESSURE
  Serial.print(bme.readCalibratedAltitude(seaLevel));
  Serial.print("m,");
  #endif
  waterPump();
  checkSoilMoisture();
  

}
void waterPump() {
  // Water pump control logic
  digitalWrite(RELAY_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(RELAY_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(RELAY_PIN, LOW);
}

void checkSoilMoisture() {
  // Soil moisture reading
  int soilMoistureValue1 = analogRead(SOIL_SENSOR_1);
  Serial.print(soilMoistureValue1);
  Serial.print(",");
  
  

  // Convert soil moisture value to percentage
  soilMoisturePer = map(soilMoistureValue1, DRY_THRESHOLD, WET_THRESHOLD, 0, 100);
  int soilMoisturePercent = constrain(soilMoisturePer, 0, 100);

  // Print soil moisture percentage
  Serial.print(soilMoisturePercent);
  Serial.print("%,");

  // Pump control based on soil moisture
  if (soilMoistureValue1 >= pump_trigger) {
    pumpOn();
  } else {
    pumpOff();
  }
}

void pumpOn() {
  digitalWrite(RELAY_PIN, HIGH);
  pumpStatus = true;
  delay(2000);
  if (pumpStatus) {
    Serial.println("-Pump On,");
  }
}

void pumpOff() {
  digitalWrite(RELAY_PIN, LOW);
  pumpStatus = false;
  delay(2000);
  if (!pumpStatus) {
    Serial.println("-Pump Off,");
  }
}


